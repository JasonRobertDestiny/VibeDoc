#!/usr/bin/env python3
"""
Â¢ûÂº∫ÁâàMCPÁõ¥Êé•ÂÆ¢Êà∑Á´Ø - ÊîØÊåÅÈ≠îÂ°îÂπ≥Âè∞ÂºÇÊ≠•MCPÊúçÂä°
Â§ÑÁêÜHTTP 202ÂºÇÊ≠•ÂìçÂ∫îÔºåÈÄöËøáSSEËé∑ÂèñÁªìÊûú
"""

import requests
import json
import time
import threading
import queue
import logging
from typing import Dict, Any, Optional, Tuple
from dataclasses import dataclass
from urllib.parse import urljoin

logger = logging.getLogger(__name__)

@dataclass
class AsyncMCPResult:
    """ÂºÇÊ≠•MCPË∞ÉÁî®ÁªìÊûú"""
    success: bool
    data: str
    service_name: str
    execution_time: float
    session_id: Optional[str] = None
    error_message: Optional[str] = None

class AsyncMCPClient:
    """ÂºÇÊ≠•MCPÂÆ¢Êà∑Á´Ø - ‰∏ì‰∏∫È≠îÂ°îÂπ≥Âè∞‰ºòÂåñ"""
    
    def __init__(self):
        self.timeout = 60
        self.result_timeout = 30  # Á≠âÂæÖÂºÇÊ≠•ÁªìÊûúÁöÑË∂ÖÊó∂Êó∂Èó¥
        
        # È≠îÂ°îMCPÊúçÂä°ÈÖçÁΩÆ
        self.mcp_services = {
            "fetch": {
                "url": "https://mcp.api-inference.modelscope.net/6ec508e067dc41/sse",
                "name": "Fetch MCP",
                "enabled": True,
                "tools": {
                    "fetch": {
                        "url": "string",
                        "max_length": "integer", 
                        "start_index": "integer",
                        "raw": "boolean"
                    }
                }
            },
            "deepwiki": {
                "url": "https://mcp.api-inference.modelscope.net/d4ed08072d2846/sse",
                "name": "DeepWiki MCP", 
                "enabled": True,
                "tools": {
                    "deepwiki_fetch": {
                        "url": "string",
                        "mode": "string",
                        "maxDepth": "integer"
                    }
                }
            }
        }
    
    def _get_sse_endpoint(self, service_url: str) -> Tuple[bool, Optional[str], Optional[str]]:
        """Ëé∑ÂèñSSE endpointÂíåsession_id"""
        try:
            headers = {
                "Accept": "text/event-stream",
                "Cache-Control": "no-cache"
            }
            
            logger.info(f"üîó ËøûÊé•SSE: {service_url}")
            response = requests.get(service_url, headers=headers, timeout=15, stream=True)
            
            if response.status_code != 200:
                logger.error(f"‚ùå SSEËøûÊé•Â§±Ë¥•: HTTP {response.status_code}")
                return False, None, None
            
            # Ëß£ÊûêSSE‰∫ã‰ª∂
            for line in response.iter_lines(decode_unicode=True):
                if line.startswith('data: '):
                    data = line[6:]  # ÂéªÊéâ 'data: ' ÂâçÁºÄ
                    if '/messages/' in data and 'session_id=' in data:
                        session_id = data.split('session_id=')[1]
                        logger.info(f"‚úÖ Ëé∑Âèñsession_id: {session_id}")
                        response.close()
                        return True, data, session_id
                elif line == "":
                    break
            
            response.close()
            logger.error("‚ùå Êú™Ëé∑ÂèñÂà∞ÊúâÊïàÁöÑendpoint")
            return False, None, None
            
        except Exception as e:
            logger.error(f"üí• SSEËøûÊé•ÂºÇÂ∏∏: {str(e)}")
            return False, None, None
    
    def _listen_for_result(self, service_url: str, session_id: str, result_queue: queue.Queue):
        """ÁõëÂê¨SSEÊµÅËé∑ÂèñÂºÇÊ≠•ÁªìÊûú"""
        try:
            headers = {
                "Accept": "text/event-stream",
                "Cache-Control": "no-cache"
            }
            
            logger.info(f"üëÇ ÂºÄÂßãÁõëÂê¨ÁªìÊûú...")
            response = requests.get(service_url, headers=headers, timeout=self.result_timeout, stream=True)
            
            if response.status_code != 200:
                result_queue.put(("error", f"ÁõëÂê¨ËøûÊé•Â§±Ë¥•: HTTP {response.status_code}"))
                return
            
            # ÁõëÂê¨SSE‰∫ã‰ª∂
            for line in response.iter_lines(decode_unicode=True):
                if line.startswith('data: '):
                    data_str = line[6:]
                    try:
                        # Â∞ùËØïËß£ÊûêJSONÊï∞ÊçÆ
                        data = json.loads(data_str)
                        if isinstance(data, dict):
                            # Ê£ÄÊü•ÊòØÂê¶ÊòØMCPÂìçÂ∫î
                            if "result" in data or "error" in data:
                                logger.info("‚úÖ Êî∂Âà∞MCPÂìçÂ∫î")
                                result_queue.put(("success", data))
                                break
                            elif "id" in data:  # ÂèØËÉΩÊòØMCPÂìçÂ∫î
                                result_queue.put(("success", data))
                                break
                    except json.JSONDecodeError:
                        # ÈùûJSONÊï∞ÊçÆÔºåÂèØËÉΩÊòØÁ∫ØÊñáÊú¨ÁªìÊûú
                        if len(data_str.strip()) > 10:
                            logger.info("‚úÖ Êî∂Âà∞ÊñáÊú¨ÂìçÂ∫î")
                            result_queue.put(("success", {"result": {"text": data_str}}))
                            break
                elif line.startswith('event: '):
                    event_type = line[7:]
                    logger.debug(f"üì® SSE‰∫ã‰ª∂: {event_type}")
            
            response.close()
            
        except requests.exceptions.Timeout:
            logger.warning("‚è∞ ÁªìÊûúÁõëÂê¨Ë∂ÖÊó∂")
            result_queue.put(("timeout", "Á≠âÂæÖÁªìÊûúË∂ÖÊó∂"))
        except Exception as e:
            logger.error(f"üí• ÁõëÂê¨ÂºÇÂ∏∏: {str(e)}")
            result_queue.put(("error", f"ÁõëÂê¨ÂºÇÂ∏∏: {str(e)}"))
    
    def call_mcp_service_async(
        self,
        service_key: str,
        tool_name: str,
        tool_args: Dict[str, Any]
    ) -> AsyncMCPResult:
        """ÂºÇÊ≠•Ë∞ÉÁî®MCPÊúçÂä°"""
        
        if service_key not in self.mcp_services:
            return AsyncMCPResult(
                success=False,
                data="",
                service_name=service_key,
                execution_time=0.0,
                error_message=f"Êú™Áü•ÊúçÂä°: {service_key}"
            )
        
        service_config = self.mcp_services[service_key]
        service_url = service_config["url"]
        service_name = service_config["name"]
        
        start_time = time.time()
        
        logger.info(f"üöÄ ÂºÄÂßãË∞ÉÁî® {service_name}")
        logger.info(f"üìä Â∑•ÂÖ∑: {tool_name}")
        logger.info(f"üìã ÂèÇÊï∞: {json.dumps(tool_args, ensure_ascii=False)}")
        
        # Ê≠•È™§1: Ëé∑ÂèñSSE endpoint
        success, endpoint_path, session_id = self._get_sse_endpoint(service_url)
        if not success:
            return AsyncMCPResult(
                success=False,
                data="",
                service_name=service_name,
                execution_time=time.time() - start_time,
                error_message="Ëé∑ÂèñendpointÂ§±Ë¥•"
            )
        
        # Ê≠•È™§2: ÂêØÂä®ÁªìÊûúÁõëÂê¨Âô®
        result_queue = queue.Queue()
        listener_thread = threading.Thread(
            target=self._listen_for_result,
            args=(service_url, session_id, result_queue)
        )
        listener_thread.daemon = True
        listener_thread.start()
        
        # Á≠âÂæÖ‰∏ÄÂ∞èÊÆµÊó∂Èó¥Á°Æ‰øùÁõëÂê¨Âô®Â∞±Áª™
        time.sleep(0.5)
        
        # Ê≠•È™§3: ÂèëÈÄÅMCPËØ∑Ê±Ç
        try:
            base_url = service_url.replace('/sse', '')
            full_endpoint = urljoin(base_url, endpoint_path)
            
            mcp_request = {
                "jsonrpc": "2.0",
                "id": int(time.time() * 1000),
                "method": "tools/call",
                "params": {
                    "name": tool_name,
                    "arguments": tool_args
                }
            }
            
            headers = {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
            
            logger.info(f"üì§ ÂèëÈÄÅËØ∑Ê±ÇÂà∞: {full_endpoint}")
            response = requests.post(full_endpoint, json=mcp_request, headers=headers, timeout=10)
            
            logger.info(f"üìä ËØ∑Ê±ÇÂìçÂ∫î: HTTP {response.status_code}")
            
            if response.status_code == 202:  # Accepted - ÂºÇÊ≠•Â§ÑÁêÜ
                logger.info("‚úÖ ËØ∑Ê±ÇÂ∑≤Êé•ÂèóÔºåÁ≠âÂæÖÂºÇÊ≠•ÁªìÊûú...")
                
                # Ê≠•È™§4: Á≠âÂæÖÂºÇÊ≠•ÁªìÊûú
                try:
                    result_type, result_data = result_queue.get(timeout=self.result_timeout)
                    
                    execution_time = time.time() - start_time
                    
                    if result_type == "success":
                        # Ëß£ÊûêÁªìÊûúÊï∞ÊçÆ
                        content = self._extract_content_from_response(result_data)
                        if content and len(content.strip()) > 10:
                            logger.info(f"‚úÖ {service_name} ÂºÇÊ≠•Ë∞ÉÁî®ÊàêÂäü!")
                            return AsyncMCPResult(
                                success=True,
                                data=content,
                                service_name=service_name,
                                execution_time=execution_time,
                                session_id=session_id
                            )
                        else:
                            return AsyncMCPResult(
                                success=False,
                                data="",
                                service_name=service_name,
                                execution_time=execution_time,
                                session_id=session_id,
                                error_message="ÂìçÂ∫îÂÜÖÂÆπ‰∏∫Á©∫"
                            )
                    else:
                        return AsyncMCPResult(
                            success=False,
                            data="",
                            service_name=service_name,
                            execution_time=execution_time,
                            session_id=session_id,
                            error_message=str(result_data)
                        )
                        
                except queue.Empty:
                    return AsyncMCPResult(
                        success=False,
                        data="",
                        service_name=service_name,
                        execution_time=time.time() - start_time,
                        session_id=session_id,
                        error_message="Á≠âÂæÖÂºÇÊ≠•ÁªìÊûúË∂ÖÊó∂"
                    )
            
            elif response.status_code == 200:
                # ÂêåÊ≠•ÂìçÂ∫î
                try:
                    data = response.json()
                    content = self._extract_content_from_response(data)
                    execution_time = time.time() - start_time
                    
                    return AsyncMCPResult(
                        success=bool(content and len(content.strip()) > 10),
                        data=content or "",
                        service_name=service_name,
                        execution_time=execution_time,
                        session_id=session_id,
                        error_message=None if content else "ÂìçÂ∫îÂÜÖÂÆπ‰∏∫Á©∫"
                    )
                except json.JSONDecodeError:
                    content = response.text
                    return AsyncMCPResult(
                        success=len(content.strip()) > 10,
                        data=content,
                        service_name=service_name,
                        execution_time=time.time() - start_time,
                        session_id=session_id
                    )
            else:
                return AsyncMCPResult(
                    success=False,
                    data="",
                    service_name=service_name,
                    execution_time=time.time() - start_time,
                    session_id=session_id,
                    error_message=f"HTTP {response.status_code}: {response.text[:200]}"
                )
                
        except Exception as e:
            return AsyncMCPResult(
                success=False,
                data="",
                service_name=service_name,
                execution_time=time.time() - start_time,
                session_id=session_id,
                error_message=f"ËØ∑Ê±ÇÂºÇÂ∏∏: {str(e)}"
            )
    
    def _extract_content_from_response(self, response_data: Any) -> Optional[str]:
        """‰ªéÂìçÂ∫î‰∏≠ÊèêÂèñÂÜÖÂÆπ"""
        try:
            if isinstance(response_data, str):
                return response_data
            
            if isinstance(response_data, dict):
                # Ê£ÄÊü•Ê†áÂáÜMCPÂìçÂ∫îÊ†ºÂºè
                if "result" in response_data:
                    result = response_data["result"]
                    
                    # Ê£ÄÊü•contentÊï∞ÁªÑ
                    if "content" in result and isinstance(result["content"], list):
                        contents = []
                        for item in result["content"]:
                            if isinstance(item, dict) and "text" in item:
                                contents.append(item["text"])
                            elif isinstance(item, str):
                                contents.append(item)
                        if contents:
                            return "\n".join(contents)
                    
                    # Ê£ÄÊü•ÂÖ∂‰ªñÂ≠óÊÆµ
                    for field in ["text", "data", "message"]:
                        if field in result and result[field]:
                            return str(result[field])
                    
                    # Â¶ÇÊûúresultÊú¨Ë∫´ÊòØÂ≠óÁ¨¶‰∏≤
                    if isinstance(result, str):
                        return result
                
                # Ê£ÄÊü•ÈîôËØØ
                if "error" in response_data:
                    error = response_data["error"]
                    if isinstance(error, dict) and "message" in error:
                        return f"ÈîôËØØ: {error['message']}"
                    else:
                        return f"ÈîôËØØ: {str(error)}"
                
                # Ê£ÄÊü•Áõ¥Êé•ÁöÑÂ≠óÊÆµ
                for field in ["content", "data", "text", "message", "response"]:
                    if field in response_data and response_data[field]:
                        content = response_data[field]
                        if isinstance(content, list):
                            return "\n".join(str(item) for item in content if item)
                        else:
                            return str(content)
            
            # Â¶ÇÊûúÈÉΩÊ≤°ÊúâÂåπÈÖçÔºåËøîÂõûJSONÂ≠óÁ¨¶‰∏≤
            return json.dumps(response_data, ensure_ascii=False, indent=2)
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è ÂÜÖÂÆπÊèêÂèñÂ§±Ë¥•: {e}")
            return str(response_data) if response_data else None

# ÂÖ®Â±ÄÂÆû‰æã
async_mcp_client = AsyncMCPClient()

# ‰æøÊç∑ÂáΩÊï∞
def call_fetch_mcp_async(url: str, max_length: int = 5000) -> AsyncMCPResult:
    """ÂºÇÊ≠•Ë∞ÉÁî®Fetch MCPÊúçÂä°"""
    return async_mcp_client.call_mcp_service_async(
        "fetch",
        "fetch",
        {"url": url, "max_length": max_length}
    )

def call_deepwiki_mcp_async(url: str, mode: str = "aggregate") -> AsyncMCPResult:
    """ÂºÇÊ≠•Ë∞ÉÁî®DeepWiki MCPÊúçÂä°"""
    return async_mcp_client.call_mcp_service_async(
        "deepwiki",
        "deepwiki_fetch", 
        {"url": url, "mode": mode}
    )

if __name__ == "__main__":
    # ÊµãËØïÂºÇÊ≠•MCPÂÆ¢Êà∑Á´Ø
    print("üß™ ÊµãËØïÂºÇÊ≠•MCPÂÆ¢Êà∑Á´Ø")
    print("=" * 50)
    
    # ÊµãËØïFetch MCP
    print("ÊµãËØïFetch MCP...")
    result = call_fetch_mcp_async("https://example.com")
    print(f"ÊàêÂäü: {result.success}")
    print(f"ÂÜÖÂÆπÈïøÂ∫¶: {len(result.data) if result.data else 0}")
    print(f"ÊâßË°åÊó∂Èó¥: {result.execution_time:.2f}s")
    if result.error_message:
        print(f"ÈîôËØØ: {result.error_message}")
    
    print("\n" + "-" * 30)
    
    # ÊµãËØïDeepWiki MCP
    print("ÊµãËØïDeepWiki MCP...")
    result = call_deepwiki_mcp_async("https://deepwiki.org/openai/openai-python")
    print(f"ÊàêÂäü: {result.success}")
    print(f"ÂÜÖÂÆπÈïøÂ∫¶: {len(result.data) if result.data else 0}")
    print(f"ÊâßË°åÊó∂Èó¥: {result.execution_time:.2f}s")
    if result.error_message:
        print(f"ÈîôËØØ: {result.error_message}")
    
    print("\n‚úÖ ÂºÇÊ≠•MCPÂÆ¢Êà∑Á´ØÊµãËØïÂÆåÊàê")